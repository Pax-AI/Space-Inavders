import math
import turtle 
import os
import random
import numpy
from numpy import random

#initiate screen
wn = turtle.Screen()
wn.bgcolor("black")
wn.title("Space Invaders")
wn.bgpic("space.gif")

turtle.register_shape("inv1.gif")
turtle.register_shape("inv2.gif")
turtle.register_shape("ship.gif")
turtle.register_shape("laser.gif")

#frame
border_pen = turtle.Turtle()
border_pen.speed(0)
border_pen.color("white")
border_pen.penup()
border_pen.setposition(-300,-300)
border_pen.pendown()
border_pen.pensize(3)

for side in range(4):
    border_pen.fd(600)
    border_pen.lt(90)
border_pen.hideturtle()

#scoreboard
score = 0

score_pen = turtle.Turtle()
score_pen.speed(0)
score_pen.color("white")
score_pen.penup()
score_pen.setposition(-290,280)
scorestring = "Score: %s" %score
score_pen.write(scorestring, False, align="left", font=("Arial", 14, "normal"))
score_pen.hideturtle()


#initiate player
player = turtle.Turtle()
player.color("blue")
player.shape("ship.gif")
player.penup()
player.speed(0)
player.setposition(0, -250)
player.setheading(90)
playerspeed = 30

#initiate enemy
num_enemies = 5
enemies = []

for i in range(num_enemies):
    enemies.append(turtle.Turtle())

for enemy in enemies:
    enemy.color("red")
    t = random.uniform(0, 1)
    if t > 0.50:
         enemy.shape("inv1.gif")
    else:
        enemy.shape("inv2.gif")
    enemy.penup()
    enemy.speed(0)
    x = random.randint(-200, 200)
    y = random.randint(100, 250)
    enemy.setposition(x, y)
    
enemyspeed = 2

#initiate weapon
bullet = turtle.Turtle()
bullet.color("yellow")
bullet.shape("laser.gif")
bullet.penup()
bullet.speed(0)
bullet.setheading(90)
bullet.shapesize(0.5, 0.5)
bullet.hideturtle()

bulletspeed = 20
bulletstate = "ready"

#controls
#player sprite
def move_left():
    x = player.xcor()
    x -= playerspeed
    if x < -280:
        x = -280
    player.setx(x)
    
def move_right():
    x = player.xcor()
    x += playerspeed
    if x > 280:
        x = 280
    player.setx(x)

#bullet sprite
def fire():
    global bulletstate
    
    if bulletstate == "ready":
        bulletstate = "fire"
        x = player.xcor()
        y = player.ycor() + 10
        bullet.setposition(x,y)
        bullet.showturtle()
        
#sprite interactions
def collision(t1, t2):
    distance = math.sqrt(math.pow(t1.xcor()-t2.xcor(),2)+math.pow(t1.ycor()-t2.ycor(),2))
    if distance < 15:
        return True
    else:
        return False
    
#keyboard bindings
turtle.listen()
turtle.onkey(move_left, "Left")
turtle.onkey(move_right, "Right")
turtle.onkey(fire, "space")

#game
while True:
    
    #enemy movement
    for enemy in enemies:
        x = enemy.xcor()
        x += enemyspeed
        enemy.setx(x)
        
        #downward movement
        if enemy.xcor() > 280:
            for e in enemies:
                y = e.ycor()
                y -= 40
                e.sety(y)
            enemyspeed *= -1
            
        if enemy.xcor() < -280:
            for e in enemies:
                y = e.ycor()
                y -= 40
                e.sety(y)
            enemyspeed *= -1
            
        #collisions   
        if collision(bullet, enemy):
            
            #reset bullet
            bullet.hideturtle()
            bulletstate == "ready"
            bullet.setposition(0, -400)
            
            #reset enemy
            x = random.randint(-200, 200)
            y = random.randint(100, 250)
            enemy.setposition(x, y)
            
            #update score
            score += 10
            scorestring = "Score: %s" %score
            score_pen.clear()
            score_pen.write(scorestring, False, align="left", font=("Arial", 14, "normal"))
        
        if collision(player, enemy):
            player.hideturtle()
            enemy.hideturtle()
            break
            
    #bullet movement
    y = bullet.ycor()
    y += bulletspeed
    bullet.sety(y)
    
    if bullet.ycor() > 275:
        bullet.hideturtle()
        bulletstate = "ready"
              
#end game
turtle.done()
